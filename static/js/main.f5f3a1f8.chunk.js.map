{"version":3,"sources":["components/Queue.js","components/Array.js","components/Stack.js","components/Arrow.js","components/LinkedList.js","components/Sort.js","components/Tree.js","components/Tabs.js","App.js","reportWebVitals.js","index.js"],"names":["Queue","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","createInitialQueue","n","queue","i","push","createQueueItem","Math","floor","random","rear","length","makeNewQueue","prompt","undefined","maxQueueSize","alert","setState","QueueState","lastOperation","QueueSteps","createQueue","front","val","index","isActive","arguments","bgcolors","color","colorCounter","QueueItem","clearQueue","dequeue","state","concat","enqueue","Enqueue","peek","_this2","react_default","a","createElement","Fragment","className","map","item","key","style","margin","backgroundColor","position","width","borderRight","type","onClick","keys","title","steps","step","React","Component","size","Array","createArrayItem","ArrayItem","clearArray","setPrevArrayState","arrayState","lastOperaion","ArraySteps","deleteAtIndex","ind","isValidIndex","splice","insertAtIndex","insertAtEnd","arr","createArray","changeVal","prevArrayState","toConsumableArray","alignContent","insertAtBeginning","deleteAtBeginning","deleteAtEnd","Stack","createStackItem","StackItem","idCounter","clearStack","StackState","StackSteps","pushElement","stack","peekStack","lastElement","popElement","temp","pop","createStack","items","height","reverse","id","borderBottom","Arrow","xmlns","fill","viewBox","fillRule","d","LinkedList","createListItem","ListItem","listState","LinkedSteps","paddingRight","components_Arrow","Sort","array","stepTime","speedMapping","1","2","3","4","5","6","skip","vals","shuffle","from","Bar","indarr","isSelected","t","m","left","right","shift","half","merge","mergeSort","j","sleep","bar","onChange","e","target","value","console","log","bblSort","ms","Promise","r","setTimeout","Tree","_useBinarySearchTree","useBinarySearchTree","ref","insert","remove","search","getData","clear","balance","generateRandomTree","checkTreeType","_useState","useState","_useState2","slicedToArray","inorder","setInorder","_useState3","_useState4","preorder","setPreorder","_useState5","_useState6","postorder","setPostorder","_useState7","_useState8","treeType","setTreeType","index_es","data","treeStyles","lineColor","join","parseInt","Tabs","toggleState","setToggleState","toggleTab","components_Array","components_LinkedList","components_Stack","components_Queue","Tree_Tree","components_Sort","App","components_Tabs","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.f5f3a1f8.chunk.js","sourcesContent":["import React from 'react'\nimport '../styles/Queue.css'\nimport '../styles/styles.css'\n\nclass Queue extends React.Component {\n    constructor(props) {\n        super(props)\n        this.maxQueueSize = 12;\n        this.colorCounter = 0;\n        this.state = {\n            QueueState: this.createInitialQueue(this.maxQueueSize),\n            front: 0,\n            rear: 2,\n            lastOperation: {},\n        }\n    }\n\n    createInitialQueue = (n) => {\n        let queue = [];\n\n        for (let i = 0; i < 3; i++) {\n            queue.push(this.createQueueItem(Math.floor(Math.random() * 50), i, true));\n        }\n\n        this.rear = queue.length - 1;\n\n        for (let i = 3; i < n; i++) {\n            queue.push(this.createQueueItem('-', i, false));\n        }\n        return queue;\n    }\n\n    makeNewQueue = () => {\n\n        let n = prompt(\"Enter size of the new queue : \");\n        if (n === null || n === '' || n === undefined) {\n            alert(\"Invalid input\");\n            return;\n        }\n        if (n > this.maxQueueSize) {\n            alert(\"Queue size cannot be greater than \" + this.maxQueueSize);\n            return;\n        }\n\n        let queue = [];\n        for (let i = 0; i < n; i++) {\n            queue.push(this.createQueueItem('-', i, false));\n        }\n\n        this.setState({ QueueState: queue, lastOperation: QueueSteps.createQueue(n), front: -1, rear: -1 });\n    }\n\n    createQueueItem = (val, index, isActive = true) => {\n        let bgcolors = [\"#FEA47F\", \"#25CCF7\", \"#EAB543\", \"#55E6C1\", \"#FD7272\"];\n\n        let color = bgcolors[this.colorCounter % bgcolors.length];\n        if (isActive) this.colorCounter++;\n        return new QueueItem(val, color, index, isActive);\n    }\n\n    clearQueue = () => {\n        this.setState({ QueueState: [], lastOperation: QueueSteps.clearQueue(), front: -1, rear: -1 });\n    }\n\n    dequeue = () => {\n        if (this.state.front === this.state.QueueState.length) {\n            alert(\"Queue is Empty!!\")\n            return;\n        }\n        if (this.state.front === -1 && this.state.rear === -1) {\n            alert(\"Queue is Empty!!\")\n            return;\n        }\n        alert(`The Dequeued value is : ${this.state.QueueState[this.state.front].val}`)\n\n        let queue = this.state.QueueState;\n        queue[this.state.front].isActive = false;\n\n        if (this.state.front === this.state.rear) {\n            this.setState({ QueueState: queue, lastOperation: QueueSteps.dequeue(), front: -1, rear: -1 });\n        }\n        else {\n            this.setState({\n                QueueState: queue,\n                lastOperation: QueueSteps.dequeue(this.state.QueueState.length),\n                front: this.state.front + 1,\n            });\n        }\n    }\n\n    enqueue = (val) => {\n\n        if (val === \"\" || val === null) return;\n        if (this.state.QueueState.length === 10) {\n            alert(\"Cant Create Queue with more than 10 values\")\n            return;\n        }\n        if (this.state.rear === this.state.QueueState.length - 1) {\n            alert(\"Queue is Full!!\")\n            return;\n        }\n\n        let queue = this.state.QueueState;\n        queue[this.state.rear + 1] = this.createQueueItem(val, this.state.rear + 1, true);\n        if(this.state.front === -1) this.setState({ front: 0 });\n        this.setState({ QueueState: queue, lastOperation: QueueSteps.Enqueue(this.state.QueueState.length), rear: this.state.rear + 1 });\n\n    }\n\n    peek = () => {\n        if (this.state.QueueState.length === 0) {\n            alert(\"Queue is Empty!!\")\n            return;\n        }\n        if (this.state.front === this.state.QueueState.length) {\n            alert(\"Queue is Empty!!\")\n            return;\n        }\n        alert(`Peek Value is : ${this.state.QueueState[this.state.front].val}`)\n        this.setState({ QueueState: this.state.QueueState, lastOperation: QueueSteps.peek() })\n        return;\n    }\n\n    length = () => {\n        alert(`The Length of Queue is : ${this.state.rear - this.state.front + 1}`)\n        return;\n    }\n\n    render() {\n        return (\n            <>\n                <h2>Queue</h2>\n                <div className='container canvas'>\n                    {\n                        this.state.QueueState.length > 0 ? (\n                            <table className='queue-table'>\n                                <tbody>\n                                    <tr>\n                                        {/* <td style={{ paddingRight: '10px' }}><h5>Front</h5></td> */}\n                                        {\n                                            this.state.QueueState.map((item, index) => {\n                                                if (!item.isActive) item.color = 'rgba(194, 189, 189, 0.315)';\n                                                return (\n                                                    <>\n                                                        <td key={index} className={item.isActive ? 'active-queue-item' : 'passive-queue-item'} >\n                                                            <p style={{ margin: \"0 0 0 0\" }}>{item.index}</p>\n                                                            <div className='item-container' style={{ backgroundColor: item.color }} >\n                                                                <div style={{ margin: \"auto\", position: \"relative\" }}>\n                                                                    <b>{item.val}</b>\n                                                                </div>\n                                                            </div>\n                                                            <p className='trans' style={{ margin: \"0 0 0 0\" }}>{index === this.state.front ? 'Front' : ' -\\n'}</p>\n                                                            <p className='trans' style={{ margin: \"0 0 0 0\" }}>{index === this.state.rear ? 'Rear' : ' -\\n'}</p>\n                                                        </td>\n                                                    </>\n                                                )\n                                            })\n                                        }\n                                    </tr>\n                                </tbody>\n                            </table>) : (<h4 style={{ margin: \"auto auto\" }}>Queue is Empty</h4>)\n                    }\n                    <div className='row' style={{ margin: 'auto auto 10px 10px' }}>\n                        <div className=\"col\" style={{ color: 'green', width: '100px' }}>\n                            <b>{`Front: ${this.state.front}`}</b>\n                        </div>\n                        <div className=\"col\" style={{ color: 'orange' }}>\n                            <b>{`Rear: ${this.state.rear}`}</b>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"row workspace\">\n                    <div className=\"col-7\" style={{ borderRight: \"4px solid black\" }}>\n                        <div className=\"d-flex justify-content-center m-3\">\n                            <button type=\"button\" className=\"btn btn-info me-3\" onClick={() => {\n                                const val = prompt(\"Enter value : \")\n                                this.enqueue(val)\n                            }}>Enqueue</button>\n                            <button type=\"button\" className=\"btn btn-warning me-3\" onClick={() => { this.dequeue(0) }}>Dequeue</button>\n                            <button type=\"button\" className=\"btn btn-dark\" onClick={() => { this.peek() }}>Peek</button>\n\n                        </div>\n                        <div className=\"d-flex justify-content-center m-3\">\n                            <button type=\"button\" className=\"btn btn-danger me-3\" onClick={() => { this.clearQueue() }}>Clear Queue</button>\n                            <button type=\"button\" className=\"btn btn-secondary me-3\" onClick={() => { this.length() }}>Length</button>\n                            <button type=\"button\" className=\"btn btn-success me-3\" onClick={this.makeNewQueue}>Create Queue</button>\n                        </div>\n                    </div>\n                    <div className=\"col-sm\">\n                        {\n                            !(Object.keys(this.state.lastOperation).length === 0) ? (\n                                <>\n                                    <b>Last Operation: {this.state.lastOperation.title}</b>\n                                    <br />\n                                    <b>Steps:</b>\n                                    <ol className=\"step-ol\" >\n                                        {this.state.lastOperation.steps.map((step, index) => {\n                                            return <li key={index} className=\"step-li\">{step}</li>;\n                                        })}\n                                    </ol>\n                                </>\n                            ) : \"\"\n                        }\n                    </div>\n                </div>\n\n            </>\n        )\n    }\n}\n\nclass QueueItem {\n    constructor(val, color, index, isActive) {\n        this.val = val;\n        this.color = color;\n        this.index = index;\n        this.isActive = isActive;\n    }\n}\n\nexport default Queue;\n\nclass QueueSteps {\n    static Enqueue(length) {\n        return {\n            title: `Enqueue`,\n            steps: [\n                'Checks if Queue is full',\n                'if Queue is full, produces an error and exit.',\n                `if Queue is not full, Adds a New element at rear + 1 index`,\n                `Increments the rear pointer by 1.`,\n            ]\n        }\n\n    }\n    static dequeue(length) {\n        return {\n            title: `Dequeue`,\n            steps: [\n                `Checks if the Queue is empty.`,\n                `If the Queue is empty, produces an error and exit.`,\n                `If the Queue is not empty, proceeds to remove the data element at which front is pointing.`,\n                `Increases the front pointer by 1.`\n            ]\n        }\n\n    }\n    static peek() {\n        return {\n            title: `Front element Displayed`,\n            steps: [\n                `Checks if the Queue is empty.`,\n                `If the Queue is empty, produces an error and exit.`,\n                `If the Queue is not empty, accesses the data element at which rear pointing.`\n            ]\n        }\n    }\n\n    static clearQueue() {\n        return {\n            title: `Clear Queue`,\n            steps: []\n        }\n    }\n\n    static createQueue(size) {\n        return {\n            title: `Create Queue with size ${size}`,\n            steps: [\n                `Allocate an array with size ${size}.`,\n                'Initialise front and rear pointers as -1.'\n            ]\n        }\n    }\n}","import React from 'react'\nimport '../styles/Array.css'\nimport '../styles/styles.css'\n\nclass Array extends React.Component {\n    constructor(props) {\n        super(props)\n        this.colorCounter = 0;\n        this.state = {\n            prevArrayState: [],\n            arrayState: [this.createArrayItem(12), this.createArrayItem(87), this.createArrayItem(64)],\n            lastOperation: {},\n        }\n    }\n\n    createArrayItem = (val) => {\n        let bgcolors = [\"#FEA47F\", \"#25CCF7\", \"#EAB543\", \"#55E6C1\", \"#FD7272\"];\n        let color = bgcolors[this.colorCounter % bgcolors.length];\n        this.colorCounter++;\n        return new ArrayItem(val, color);\n    }\n\n    setPrevArrayState() {\n        this.setState({\n            prevArrayState: [...this.state.arrayState],\n        })\n    }\n\n    clearArray = () => {\n        this.setPrevArrayState();\n        this.setState({ arrayState: [], lastOperaion: ArraySteps.clearArray() });\n    }\n\n    deleteAtIndex = (ind, steps) => {\n        if (!this.isValidIndex(ind)) {\n            alert(\"Invalid Index\");\n            return;\n        }\n        this.setPrevArrayState();\n        this.state.arrayState.splice(ind, 1);\n        this.setState({ arrayState: this.state.arrayState, lastOperation: steps });\n    }\n\n    insertAtIndex = (ind, val, steps) => {\n        if (!this.isValidIndex(ind)) {\n            alert(\"Invalid Index \" + ind);\n            return;\n        }\n        if (this.state.arrayState.length === 20) {\n            alert(\"Cant create array with length more than 20\");\n            return;\n        }\n        if (ind === \"\" || val === \"\" || ind === null || val === null) return;\n        this.setPrevArrayState();\n        this.state.arrayState.splice(ind, 0, this.createArrayItem(val));\n        this.setState({ arrayState: this.state.arrayState, lastOperation: steps });\n    }\n\n    insertAtEnd = (val) => {\n        if (val === \"\" || val === null) return;\n        let arr = this.state.arrayState;\n        arr.push(this.createArrayItem(val));\n        this.setPrevArrayState();\n        this.setState({ arrayState: arr, lastOperation: ArraySteps.insertAtEnd(this.state.arrayState.length) });\n    }\n\n    createArray = () => {\n        let size = prompt(\"Enter the size of the array\");\n        this.clearArray();\n        if (size > 20) {\n            alert(\"Cant create array with length more than 20\");\n            return;\n        }\n        let arr = [];\n        while (size--) {\n            arr.push(this.createArrayItem(0));\n        }\n        this.setState({ arrayState: arr });\n    }\n\n    changeVal = () => {\n        let ind = prompt(\"Enter the index of the array\");\n        let val = prompt(\"Enter the value of the array\");\n        if (!this.isValidIndex(ind)) {\n            alert(\"Invalid Index \" + ind);\n            return;\n        }\n        let arr = this.state.arrayState;\n        arr[ind].val = val;\n        this.setState({ arrayState: arr });\n    }\n\n    isValidIndex = (ind) => {\n        return ind >= this.state.arrayState.length * -1 && ind < this.state.arrayState.length \n            && ind !== null && ind !== \"\" && ind !== undefined;\n    }\n\n    render() {\n        return (\n            <>\n                <h2>Array</h2>\n                <div className='container canvas'>\n                    {\n                        this.state.arrayState.length > 0 ? (\n                            <table className='array-table'>\n                                <tbody>\n                                    <tr style={{alignContent: 'center'}}>\n                                        {this.state.prevArrayState.map((item, index) => {\n                                            return <td key={index} className='prev-array-item' >\n                                                <p style={{ margin: \"0 0 0 0\" }}>{index}</p>\n                                                <div className='item-container' style={{ backgroundColor: item.color }}>\n                                                    <div style={{ margin: \"auto\", position: \"relative\" }}>\n                                                        <b>{item.val}</b>\n                                                    </div>\n                                                </div>\n                                            </td>\n                                        })}\n                                    </tr>\n                                    <tr>\n                                        {this.state.arrayState.map((item, index) => {\n                                            return <td key={index} className='array-item' >\n                                                <p style={{ margin: \"0 0 0 0\" }}>{index}</p>\n                                                <div className='item-container' style={{ backgroundColor: item.color }}>\n                                                    <div style={{ margin: \"auto\", position: \"relative\" }}>\n                                                        <b>{item.val}</b>\n                                                    </div>\n                                                </div>\n                                            </td>\n                                        })}\n                                    </tr>\n                                </tbody>\n                            </table>) : (<h4 style={{ margin: \"auto auto\" }}>Array is Empty</h4>)\n                    }\n                </div>\n                <div className=\"row workspace\">\n                    <div className=\"col-7\" style={{ borderRight: \"4px solid black\" }}>\n                        <div className=\"d-flex justify-content-center m-3\">\n                            <button type=\"button\" className=\"btn btn-info me-3\" onClick={() => {\n                                const ind = prompt(\"Enter the Index\");\n                                if(ind === \"\" || ind === null) {\n                                    alert(\"Invalid Index\");\n                                    return;\n                                };\n                                const val = prompt(\"Enter the value\");\n                                this.insertAtIndex(ind, val, ArraySteps.insertAtIndex(ind, this.state.arrayState.length + 1))\n                            }}>Insert Element at Index</button>\n                            <button type=\"button\" className=\"btn btn-info me-3\" onClick={() => {\n                                const val = prompt(\"Enter the value\");\n                                this.insertAtIndex(0, val, ArraySteps.insertAtBeginning(this.state.arrayState.length + 1))\n                            }}>Insert Element at Beginning</button>\n                            <button type=\"button\" className=\"btn btn-info me-3\" onClick={() => {\n                                const val = prompt(\"Enter the value\");\n                                this.insertAtEnd(val)\n                            }}>Insert Element at End</button>\n                        </div>\n                        <div className=\"d-flex justify-content-center m-3\">\n                            <button type=\"button\" className=\"btn btn-warning me-3\" onClick={() => {\n                                this.deleteAtIndex(0, ArraySteps.deleteAtBeginning(this.state.arrayState.length - 1))\n                            }}>Delete Element from Start</button>\n                            <button type=\"button\" className=\"btn btn-warning me-3\" onClick={() => {\n                                this.deleteAtIndex(-1, ArraySteps.deleteAtEnd(this.state.arrayState.length - 1))\n                            }}>Delete Element from End</button>\n                            <button type=\"button\" className=\"btn btn-warning me-3\" onClick={() => {\n                                const ind = prompt(\"Enter the Index\");\n                                this.deleteAtIndex(ind, ArraySteps.deleteAtIndex(ind, this.state.arrayState.length - 1))\n                            }}>Delete Element at Index</button>\n                        </div>\n                        <div className=\"d-flex justify-content-center m-3\">\n                            <button type=\"button\" className=\"btn btn-primary me-3\" onClick={this.changeVal}>Change Value at Index</button>\n                            <button type=\"button\" className=\"btn btn-danger me-3\" onClick={this.clearArray}>Clear Array</button>\n                            <button type=\"button\" className=\"btn btn-success me-3\" onClick={this.createArray}>Create Array</button>\n                        </div>\n                    </div>\n                    <div className=\"col-sm\">\n                        {\n                            !(Object.keys(this.state.lastOperation).length === 0) ? (\n                                <>\n                                    <b>Last Operation: {this.state.lastOperation.title}</b>\n                                    {\n                                        (this.state.lastOperation.steps.length === 0) ? \"\" :\n                                            (<> <b>Steps:</b>\n                                                <ol className=\"step-ol\" >\n                                                    {this.state.lastOperation.steps.map((step, index) => {\n                                                        return <li key={index} className=\"step-li\">{step}</li>;\n                                                    })}\n                                                </ol>\n                                            </>\n                                            )\n                                    }\n                                </>\n                            ) : \"\"\n                        }\n                    </div>\n                </div>\n\n            </>\n        )\n    }\n}\n\nclass ArrayItem {\n    constructor(val, color) {\n        this.val = val;\n        this.color = color;\n    }\n}\n\nexport default Array;\n\nclass ArraySteps {\n    static insertAtIndex(index, size) {\n        return {\n            title: `Insert Element at Index ${index}`,\n            steps: [\n                `Create a new Array with size ${size}.`,\n                `Copy all the elements from the old Array till index ${index} to the new Array .`,\n                `Insert the new element at index ${index} of the new Array.`,\n                `Copy all the elements from the old Array from index ${index} till end to the new Array .`,\n            ]\n        }\n    }\n\n    static insertAtBeginning(size) {\n        return {\n            title: `Insert Element at Beginning`,\n            steps: [\n                `Create a new Array with size ${size}.`,\n                `Insert the new element to position 0 of the new Array.`,\n                `Copy all the elements from the old Array to the new Array from index 1.`,\n            ]\n        }\n    }\n\n    static insertAtEnd(size) {\n        return {\n            title: `Insert Element at End`,\n            steps: [\n                `Create a new Array with size ${size}.`,\n                `Copy all the elements from the old Array to the new Array.`,\n                `Insert the new element to position ${size - 1} of the new Array.`,\n            ]\n        }\n    }\n\n    static deleteAtIndex(index, size) {\n        return {\n            title: `Delete Element at Index ${index}`,\n            steps: [\n                `Create a new Array with size ${size}.`,\n                `Copy all the elements from the old Array till index ${index} to the new Array .`,\n                `Skip the element at index {index} of the old Array.`,\n                `Copy all the elements from the old Array from index ${index + 1} till end to the new Array .`,\n            ]\n        }\n    }\n\n    static deleteAtBeginning(size) {\n        return {\n            title: `Delete Element from Start`,\n            steps: [\n                `Create a new Array with size ${size}.`,\n                `Skip the element at index 0 of the old Array.`,\n                `Copy all the elements from the old Array from index 1 till end to the new Array .`,\n            ]\n        }\n    }\n\n    static deleteAtEnd(size) {\n        return {\n            title: `Delete Element from End`,\n            steps: [\n                `Create a new Array with size ${size}.`,\n                `Copy all the elements from index 0 of the old Array till index ${size - 1} to the new Array.`,\n            ]\n        }\n    }\n\n    //TODO: Add setps for change value at index\n\n    static clearArray() {\n        return {\n            title: `Clear Array`,\n            steps: []\n        }\n    }\n\n    static createArray(size) {\n        return {\n            title: `Create Array with size ${size}`,\n            steps: [\n                `Create a new Array with size ${size}.`,\n            ]\n        }\n    }\n}\n","import React from 'react'\nimport '../styles/Stack.css'\nimport '../styles/styles.css'\n\nclass Stack extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.colorCounter = 0;\n        this.items = [];\n        this.idCounter = 0;\n        this.state = {\n            StackState: [this.createStackItem(12), this.createStackItem(87), this.createStackItem(64)],\n            lastOperation: {},\n        }\n    }\n\n    createStackItem = (val) => {\n        let bgcolors = [\"#FEA47F\", \"#25CCF7\", \"#EAB543\", \"#55E6C1\", \"#FD7272\"];\n        let color = bgcolors[this.colorCounter % bgcolors.length];\n        this.colorCounter++;\n        return new StackItem(this.idCounter++, val, color);\n    }\n\n    clearStack = () => {\n        this.setState({ StackState: [], lastOperation: StackSteps.clearStack() });\n    }\n\n    pushElement = (val) => {\n        if (this.state.StackState.length === 9) {\n            alert(\"Cant create Stack with length more than 9\");\n            return;\n        }\n        if (val === \"\" || val === null) return;\n        let stack = this.state.StackState;\n        stack.push(this.createStackItem(val));\n        this.setState({ StackState: stack, lastOperation: StackSteps.pushElement() });\n    }\n\n    peekStack = () => {\n        if (this.state.StackState.length === 0) {\n            alert(\"Stack is Empty!\");\n            return;\n        }\n        let lastElement = this.state.StackState[this.state.StackState.length - 1];\n        alert(`Peek Value: ${lastElement.val}`)\n    }\n\n    popElement = () => {\n        if (this.state.StackState.length === 0) {\n            alert(\"Stack is Empty!\");\n            return;\n        }\n        let temp = this.state.StackState.pop();\n        alert(`The popped value is ${temp.val}`)\n        this.setState({ StackState: this.state.StackState, lastOperation: StackSteps.popElement() });\n    }\n\n    createStack = () => {\n        let size = prompt(\"Enter the size of the Stack\");\n        this.clearStack();\n        if (size > 10) {\n            alert(\"Cant create Stack with length more than 9\");\n            return;\n        }\n        let stack = [];\n        while (size--) {\n            stack.push(this.createStackItem(0));\n        }\n        this.setState({ StackState: stack });\n    }\n\n    render() {\n        return (\n            <>\n                <h2>Stack</h2>\n                <div className=\"container\">\n                    <div className='row'>\n                        <div className=\"col-5\">\n                            <div className='container canvas' style={{ height: \"600px\", width: \"60%\", margin: \"auto auto\" }}>\n                                {\n                                    this.state.StackState.length > 0 ? (\n                                        <table className='stack-table'>\n                                            <tbody>\n                                                {\n                                                    [...this.state.StackState].reverse().map((item, index) => {\n                                                        return <tr key={item.id}><td className='stack-item' >\n                                                            <div className='item-container' style={{ backgroundColor: item.color }}>\n                                                                <div style={{ margin: \"auto\", position: \"relative\" }}>\n                                                                    <b>{item.val}</b>\n                                                                </div>\n                                                            </div>\n                                                        </td>\n                                                        </tr>\n                                                    })}\n                                            </tbody>\n                                        </table>) : (<h4 style={{ margin: \"auto auto\" }}>Stack is Empty</h4>)\n                                }\n                            </div>\n                        </div>\n                        <div className=\"col-7\">\n                            <div className=\"row workspace\" style={{ borderBottom: \"4px solid black\" }}>\n                                <div className=\"d-flex justify-content-center m-3\">\n                                    <button type=\"button\" className=\"btn btn-info me-3\" onClick={() => {\n                                        const val = prompt(\"Enter the value\");\n                                        this.pushElement(val)\n                                    }}>Push Element in the Stack</button>\n                                </div>\n                                <div className=\"d-flex justify-content-center m-3\">\n                                    <button type=\"button\" className=\"btn btn-warning me-3\" onClick={() => {\n                                        this.popElement()\n                                    }}>POP Element from the Stack</button>\n                                </div>\n                                <div className=\"d-flex justify-content-center m-3\">\n                                    <button type=\"button\" className=\"btn btn-danger me-3\" onClick={this.clearStack}>Clear Stack</button>\n                                    <button type=\"button\" className=\"btn btn-secondary\" onClick={this.peekStack}>Peek</button>\n                                </div>\n                            </div>\n                            <div className=\"row\">\n                                {\n                                    !(Object.keys(this.state.lastOperation).length === 0) ? (\n                                        <>\n                                            <b>Last Operation: {this.state.lastOperation.title}</b>\n                                            <br />\n                                            <b>Steps:</b>\n                                            <ol className=\"step-ol\" >\n                                                {this.state.lastOperation.steps.map((step, index) => {\n                                                    return <li key={index} className=\"step-li\">{step}</li>;\n                                                })}\n                                            </ol>\n                                        </>\n                                    ) : \"\"\n                                }\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </>\n        )\n    }\n}\n\nclass StackItem {\n    constructor(id, val, color) {\n        this.id = id;\n        this.val = val;\n        this.color = color;\n    }\n}\nexport default Stack;\nclass StackSteps {\n    static pushElement() {\n        return {\n            title: `Element pushed in the Stack`,\n            steps: [`Checks if the stack is full.`,\n                `If the stack is full, produces an error and exit.`,\n                `If the stack is not full, increments top to point next empty space.`,\n                `Adds data element to the stack location, where top is pointing.`\n\n            ]\n        }\n    }\n    static popElement() {\n        return {\n            title: `Element popped out of Stack`,\n            steps: [\n                `Checks if the stack is empty.`,\n                `If the stack is empty, produces an error and exit.`,\n                `If the stack is not empty, accesses the data element at which top is pointing.`,\n                `Decreases the value of top by 1.`\n            ]\n        }\n    }\n    static clearStack() {\n        return {\n            title: `Clear Stack`,\n            steps: [\n                `Stack is Deleted.`\n            ]\n        }\n    }\n    static createStack(size) {\n        return {\n            title: `Create Stack with size ${size}`,\n            steps: [\n                `Create a new Stack with size ${size}.`,\n            ]\n        }\n    }\n}","import React from \"react\";\nimport \"../styles/arrow.css\";\nfunction Arrow() {\n  return (\n    <>\n      <div className=\"arrow\">\n        <svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          width=\"40\"\n          height=\"120\"\n          fill=\"black\"\n          className=\"bi bi-arrow-right\"\n          viewBox=\"0 0 16 16\"\n        >\n          <path\n            fillRule=\"evenodd\"\n            d=\"M1 8a.5.5 0 0 1 .5-.5h11.793l-3.147-3.146a.5.5 0 0 1 .708-.708l4 4a.5.5 0 0 1 0 .708l-4 4a.5.5 0 0 1-.708-.708L13.293 8.5H1.5A.5.5 0 0 1 1 8z\"\n          />\n        </svg>\n      </div>\n    </>\n  );\n}\n\nexport default Arrow;\n","import React from \"react\";\nimport \"../styles/Array.css\";\nimport \"../styles/styles.css\";\nimport Arrow from \"./Arrow\";\n\nclass LinkedList extends React.Component {\n  constructor(props) {\n    super(props);\n    this.colorCounter = 0;\n    this.state = {\n      listState: [\n        this.createListItem(12),\n        this.createListItem(87),\n        this.createListItem(64),\n      ],\n      lastOperation: {},\n    };\n  }\n\n  createListItem = (val) => {\n    let bgcolors = [\"#FEA47F\", \"#25CCF7\", \"#EAB543\", \"#55E6C1\", \"#FD7272\"];\n    let color = bgcolors[this.colorCounter % bgcolors.length];\n    this.colorCounter++;\n    return new ListItem(val, color);\n  };\n\n  clearArray = () => {\n    this.setState({ listState: [], lastOperaion: LinkedSteps.clearArray() });\n  };\n\n  deleteAtIndex = (ind, steps) => {\n    if (!this.isValidIndex(ind)) {\n      alert(\"Invalid Index\");\n      return;\n    }\n    this.state.listState.splice(ind, 1);\n    this.setState({ listState: this.state.listState, lastOperation: steps });\n  };\n\n  insertAtIndex = (ind, val, steps) => {\n    if (!this.isValidIndex(ind)) {\n      alert(\"Invalid Index \" + ind);\n      return;\n    }\n\n    if (ind === \"\" || val === \"\" || ind === null || val === null) return;\n    this.state.listState.splice(ind, 0, this.createListItem(val));\n    this.setState({ listState: this.state.listState, lastOperation: steps });\n  };\n\n  insertAtEnd = (val) => {\n    if (val === \"\" || val === null) return;\n    let arr = this.state.listState;\n    arr.push(this.createListItem(val));\n\n    this.setState({\n      listState: arr,\n      lastOperation: LinkedSteps.insertAtEnd(this.state.listState.length),\n    });\n  };\n\n  createArray = () => {\n    let size = prompt(\"Enter the size of the array\");\n    this.clearArray();\n    if (size > 20) {\n      alert(\"Cant create array with length more than 20\");\n      return;\n    }\n    let arr = [];\n    while (size--) {\n      arr.push(this.createListItem(0));\n    }\n    this.setState({ listState: arr });\n  };\n\n  changeVal = () => {\n    let ind = prompt(\"Enter the index of the array\");\n    let val = prompt(\"Enter the value of the array\");\n    if (!this.isValidIndex(ind)) {\n      alert(\"Invalid Index \" + ind);\n      return;\n    }\n    let arr = this.state.listState;\n    arr[ind].val = val;\n    this.setState({ listState: arr });\n  };\n\n  isValidIndex = (ind) => {\n    return (\n      ind >= this.state.listState.length * -1 &&\n      ind < this.state.listState.length\n    );\n  };\n\n  render() {\n    return (\n      <>\n        <h2>Linked List</h2>\n        <div className=\"container canvas\">\n          {this.state.listState.length > 0 ? (\n            <table className=\"array-table\">\n              <tbody>\n                <tr>\n                  <td key={-1} style={{ paddingRight: '10px' }}><b>Head</b></td>\n                  {this.state.listState.map((item, index) => {\n                    return (\n                      <>\n                        <td className=\"array-item\">\n                          <div\n                            className=\"item-container\"\n                            style={{ backgroundColor: item.color }}\n                          >\n                            <div style={{ margin: \"auto\" }}>\n                              <b>{item.val}</b>\n                            </div>\n                          </div>\n                        </td>\n                        <td>\n                          {index < this.state.listState.length - 1 ? (\n                            <Arrow />\n                          ) : (\n                            \"\"\n                          )}\n                        </td>\n                      </>\n                    );\n                  })}\n                </tr>\n              </tbody>\n            </table>\n          ) : (\n            <h4 style={{ margin: \"auto auto\" }}>List is Empty</h4>\n          )}\n        </div>\n        <div className=\"row workspace\">\n          <div className=\"col-7\" style={{ borderRight: \"4px solid black\" }}>\n            <div className=\"d-flex justify-content-center m-3\">\n              <button\n                type=\"button\"\n                className=\"btn btn-info me-3\"\n                onClick={() => {\n                  const ind = prompt(\"Enter the Index\");\n                  const val = prompt(\"Enter the value\");\n                  this.insertAtIndex(\n                    ind,\n                    val,\n                    LinkedSteps.insertAtIndex(\n                      ind, this.state.listState.length - 1\n                    )\n                  );\n                }}\n              >\n                Insert Element at Index\n              </button>\n              <button\n                type=\"button\"\n                className=\"btn btn-info me-3\"\n                onClick={() => {\n                  const val = prompt(\"Enter the value\");\n                  this.insertAtIndex(\n                    0,\n                    val,\n                    LinkedSteps.insertAtBeginning(\n                      val\n                    )\n                  );\n                }}\n              >\n                Insert Element at Beginning\n              </button>\n              <button\n                type=\"button\"\n                className=\"btn btn-info me-3\"\n                onClick={() => {\n                  const val = prompt(\"Enter the value\");\n                  this.insertAtEnd(val);\n                }}\n              >\n                Insert Element at End\n              </button>\n            </div>\n            <div className=\"d-flex justify-content-center m-3\">\n              <button\n                type=\"button\"\n                className=\"btn btn-warning me-3\"\n                onClick={() => {\n                  this.deleteAtIndex(\n                    0,\n                    LinkedSteps.deleteAtBeginning(\n\n                    )\n                  );\n                }}\n              >\n                Delete Element from Start\n              </button>\n              <button\n                type=\"button\"\n                className=\"btn btn-warning me-3\"\n                onClick={() => {\n                  this.deleteAtIndex(\n                    -1,\n                    LinkedSteps.deleteAtEnd(this.state.listState.length - 1)\n                  );\n                }}\n              >\n                Delete Element from End\n              </button>\n              <button\n                type=\"button\"\n                className=\"btn btn-warning me-3\"\n                onClick={() => {\n                  const ind = prompt(\"Enter the Index\");\n                  this.deleteAtIndex(\n                    ind,\n                    LinkedSteps.deleteAtIndex(\n                      ind\n                    )\n                  );\n                }}\n              >\n                Delete Element at Index\n              </button>\n            </div>\n            <div className=\"d-flex justify-content-center m-3\">\n\n              <button\n                type=\"button\"\n                className=\"btn btn-danger me-3\"\n                onClick={this.clearArray}\n              >\n                Clear Linked List\n              </button>\n\n            </div>\n          </div>\n          <div className=\"col-sm\">\n            {!(Object.keys(this.state.lastOperation).length === 0) ? (\n              <>\n                <b>Last Operation: {this.state.lastOperation.title}</b>\n                {this.state.lastOperation.steps.length === 0 ? (\n                  \"\"\n                ) : (\n                  <>\n                    {\" \"}\n                    <b>Steps:</b>\n                    <ol className=\"step-ol\">\n                      {this.state.lastOperation.steps.map((step, index) => {\n                        return (\n                          <li key={index} className=\"step-li\">\n                            {step}\n                          </li>\n                        );\n                      })}\n                    </ol>\n                  </>\n                )}\n              </>\n            ) : (\n              \"\"\n            )}\n          </div>\n        </div>\n      </>\n    );\n  }\n}\n\nclass ListItem {\n  constructor(val, color) {\n    this.val = val;\n    this.color = color;\n  }\n}\n\nexport default LinkedList;\n\nclass LinkedSteps {\n  static insertAtIndex(val, index) {\n    return {\n      title: `Insert Element at Index ${index}`,\n      steps: [\n        ` Allocate memory for new node `,\n        ` Store the data ${val} to the new node.`,\n        ` Traverse the node just before the required position of new node(${index - 1}th position) `,\n        ` Change the pointers to include new node in between.`,\n      ],\n    };\n  }\n\n  static insertAtBeginning(val) {\n    return {\n      title: `Insert Element at Beginning`,\n      steps: [\n        ` Allocate memory for new node.`,\n        ` Store the data: ${val} `,\n        ` Change the next of new node to point to head.`,\n        ` Change head to point to recently created node.`\n\n      ],\n    };\n  }\n\n  static insertAtEnd(size) {\n    return {\n      title: `Insert Element at End`,\n      steps: [\n        `Allocate memory for new node`,\n        `Store data`,\n        `Traverse till the last node: ${size - 1}th node `,\n        `Change next of last node to recently created node`\n      ],\n    };\n  }\n\n  static deleteAtIndex(index) {\n    return {\n      title: `Delete Element at Index ${index}`,\n      steps: [\n        `Traverse to ${index - 1}th element `,\n        `Change the next pointers to exclude the node from the chain`,\n\n      ],\n    };\n  }\n\n  static deleteAtBeginning() {\n    return {\n      title: `Delete Element from Start`,\n      steps: [\n        `Point head to the second node`,\n\n      ],\n    };\n  }\n\n  static deleteAtEnd(size) {\n    return {\n      title: `Delete Element from End`,\n      steps: [\n        `Traverse to the ${size - 1}th element .`,\n        `Change it's next pointer to`,\n      ],\n    };\n  }\n\n  //TODO: Add setps for change value at index\n\n  static clearArray() {\n    return {\n      title: `Clear Array`,\n      steps: [],\n    };\n  }\n\n}","import React from 'react'\nimport '../styles/styles.css'\nimport '../styles/Sort.css'\n\nclass Sort extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            array: this.createArray(),\n        }\n\n        this.stepTime = 100;\n        this.speedMapping = { '1': 50, '2': 25, '3': 10, '4': 5, '5': 1, '6': 0.1 };\n        this.skip = false;\n    }\n\n    createArray() {\n        let vals = this.shuffle(Array.from(Array(100).keys()));\n        let array = [];\n        for (let i = 0; i < vals.length; i++) {\n            array.push(new Bar(i, vals[i], false));\n        }\n        return array;\n    }\n\n    setActive(indarr) {\n        let arr = this.state.array;\n        for (let i = 0; i < arr.length; i++) {\n            arr[i].isSelected = false;\n        }\n        for (let i = 0; i < indarr.length; i++) {\n            arr[indarr[i]].isSelected = true;\n        }\n        this.setState({ array: arr });\n    }\n\n    shuffle(array) {\n        var m = array.length, t, i;\n\n        // While there remain elements to shuffle…\n        while (m) {\n\n            // Pick a remaining element…\n            i = Math.floor(Math.random() * m--);\n\n            // And swap it with the current element.\n            t = array[m];\n            array[m] = array[i];\n            array[i] = t;\n        }\n\n        return array;\n    }\n\n    async merge(left, right) {\n        let arr = []\n        // Break out of loop if any one of the array gets empty\n        while (left.length && right.length) {\n            // Pick the smaller among the smallest element of left and right sub arrays \n            \n            if (left[0].height < right[0].height) {\n                arr.push(left.shift())\n            } else {\n                arr.push(right.shift())\n            }\n        }\n\n        // Concatenating the leftover elements\n        // (in case we didn't go through the entire left or right array)\n        return [...arr, ...left, ...right]\n    }\n\n    async mergeSort(array) {\n        const half = array.length / 2\n\n        // Base case or terminating case\n        if (array.length < 2) {\n            return array\n        }\n\n        const left = array.splice(0, half)\n        return  await this.merge(this.mergeSort(left), this.mergeSort(array))\n    }\n\n    async bblSort() {\n        this.skip = false;\n        let arr = this.state.array;\n        for (var i = 0; i < arr.length; i++) {\n \n            for (var j = 0; j < (arr.length - i - 1); j++) {\n\n                arr[j].isSelected = true;\n                arr[j + 1].isSelected = true;\n                this.setState({ array: arr });\n\n                if (arr[j].height > arr[j + 1].height) {\n\n                    if(!this.skip) await sleep(this.stepTime);\n\n                    let temp = arr[j]\n                    arr[j] = arr[j + 1]\n                    arr[j + 1] = temp\n\n                    this.setState({ array: arr });\n                }\n                if(!this.skip) await sleep(this.stepTime);\n                arr[j].isSelected = false;\n                arr[j + 1].isSelected = false;\n            }\n        }\n        this.setState({ array: arr });\n        this.skip = false;\n    }\n\n    render() {\n        return (\n            <>\n                <h2>Sorting Algorithms</h2>\n                <div className='container sort-canvas'>\n                    <div className='bars'>\n                        {\n                            this.state.array.map((bar, index) => {\n                                return (\n                                    <>\n                                        <div key={bar.key} className={bar.isSelected ? 'bar-selected' : 'bar'} style={{ height: `${4 * bar.height + 5}px` }} />\n                                    </>\n                                )\n                            })\n                        }\n                    </div>\n                </div>\n                <div className=\"row workspace\">\n                    <div className=\"d-flex justify-content-end\">\n                        <div className='me-3'>\n                            <b>Speed</b>\n                        </div>\n                        <select className='me-3' onChange={(e) => {\n                            this.stepTime = this.speedMapping[e.target.value];\n                            console.log(this.stepTime);\n                        }}>\n                            {\n                                Object.keys(this.speedMapping).map((key, index) => {\n                                    return (\n                                        <option key={index} value={key}>{key}</option>\n                                    )\n                                })\n                            }\n                        </select>\n                        <button type=\"button\" className=\"btn btn-danger me-3\" onClick={() => { this.skip = true }}>\n                            Skip\n                        </button>\n                    </div>\n                    <div className=\"d-flex justify-content-center m-3\">\n                        <button type=\"button\" className=\"btn btn-info me-3\" onClick={() => { this.bblSort() }}>\n                            Bubble Sort\n                        </button>\n                        {/* <button type=\"button\" className=\"btn btn-info me-3\" onClick={() => { \n                            let arr = this.mergeSort([...this.state.array]);\n                            this.setState({array: arr}) }}>\n                            Merge Sort\n                        </button> */}\n                        <button type=\"button\" className=\"btn btn-success me-3\" onClick={() => { this.setState({ array: this.createArray() }) }}>New Array</button>\n                    </div>\n                </div>\n\n            </>\n        )\n    }\n}\n\nclass Bar {\n    constructor(key, height, isSelected) {\n        this.key = key;\n        this.height = height;\n        this.isSelected = isSelected;\n    }\n}\n\nconst sleep = ms => new Promise(r => setTimeout(r, ms));\n\nexport default Sort;","import React from \"react\";\nimport \"../styles/styles.css\";\nimport \"../styles/Tree.css\";\n\nimport { BinarySearchTree, useBinarySearchTree } from \"react-tree-vis\";\nimport { useState } from 'react'\n\nexport default function Tree() {\n  const {\n    ref,\n    insert,\n    remove,\n    search,\n    getData,\n    clear,\n    balance,\n    generateRandomTree,\n    checkTreeType,\n  } = useBinarySearchTree();\n\n  const [inorder, setInorder] = useState('1, 2, 3');\n  const [preorder, setPreorder] = useState('2, 1, 3');\n  const [postorder, setPostorder] = useState('1, 3, 2');\n  const [treeType, setTreeType] = useState('Balanced');\n\n  const treeStyle = {\n    lineColor: \"red\",\n  };\n  return (\n    <>\n      <div>\n        <h2>Binary Search Tree</h2>\n        <div className=\"container tree-canvas\">\n          <BinarySearchTree data={[2, 1, 3]} ref={ref} treeStyles={treeStyle} />\n        </div>\n        <div className=\"row workspace\">\n          {/* make the buttons with colours */}\n\n          <div className=\"d-flex justify-content-center m-3\">\n            <button\n              type=\"button\"\n              className=\"btn btn-info me-3\"\n              onClick={() => {\n                let val = prompt(\"Enter value to insert:\");\n                if (!val) {\n                  alert(\"Invalid Input\");\n                  return;\n                }\n                insert(val);\n                setInorder(getData('inorder').join(', '));\n                setPreorder(getData('preorder').join(', '));\n                setPostorder(getData('postorder').join(', '));\n                setTreeType(checkTreeType().join(', '));\n              }}\n            >\n              Insert{\" \"}\n            </button>\n            <button\n              type=\"button\"\n              className=\"btn btn-warning me-3\"\n              onClick={() => {\n                let val = prompt(\"Enter value to remove:\");\n                if (!val) {\n                  alert(\"Invalid Input\");\n                  return;\n                }\n                remove(val);\n                setInorder(getData('inorder').join(', '));\n                setPreorder(getData('preorder').join(', '));\n                setPostorder(getData('postorder').join(', '));\n                setTreeType(checkTreeType().join(', '));\n              }}\n            >\n              Remove{\" \"}\n            </button>\n            <button\n              type=\"button\"\n              className=\"btn btn-danger me-3\"\n              onClick={() => {\n                clear();\n                setInorder(' ');\n                setPreorder(' ');\n                setPostorder(' ');\n                setTreeType(checkTreeType().join(', '));\n              }}\n            >\n              Clear{\" \"}\n            </button>\n            <button\n              type=\"button\"\n              className=\"btn btn-secondary me-3\"\n              onClick={() => {\n                balance();\n                setInorder(getData('inorder').join(', '));\n                setPreorder(getData('preorder').join(', '));\n                setPostorder(getData('postorder').join(', '));\n                setTreeType(checkTreeType().join(', '));\n              }}\n            >\n              Balance{\" \"}\n            </button>\n            <button\n              type=\"button\"\n              className=\"btn btn-success me-3\"\n              onClick={() => {\n                generateRandomTree(10);\n                setInorder(getData('inorder').join(', '));\n                setPreorder(getData('preorder').join(', '));\n                setPostorder(getData('postorder').join(', '));\n                setTreeType(checkTreeType().join(', '));\n              }}\n            >\n              Generate Random Tree{\" \"}\n            </button>\n            <button\n              type=\"button\"\n              className=\"btn btn-info me-3\"\n              onClick={() => {\n                let val = prompt(\"Enter value to remove:\");\n                if (!val) {\n                  alert(\"Invalid Input\");\n                  return;\n                }\n                search(parseInt(val));\n              }}\n            >\n              Search{\" \"}\n            </button>\n          </div>\n          <div style={{ color: 'green'}}>\n            <b>{`Inorder: ${inorder}`}</b><br/>\n            <b>{`Preorder: ${preorder}`}</b><br/>\n            <b>{`Postorder: ${postorder}`}</b><br/>\n            <b>{`Tree Type: ${treeType}`}</b><br/>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n","import React, { useState } from 'react';\nimport Queue from './Queue';\nimport Array from './Array';\nimport Stack from './Stack';\nimport LinkedList from './LinkedList';\nimport Sort from './Sort';\nimport Tree from './Tree';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport '../App.css';\nimport '../styles/styles.css';\n\nfunction Tabs() {\n  const [toggleState, setToggleState] = useState(1);\n\n  const toggleTab = (index) => {\n    setToggleState(index);\n  };\n\n  return (\n    <div className=\"container tabs-container\">\n      <div className=\"bloc-tabs\">\n        <button\n          className={toggleState === 1 ? \"tabs active-tabs\" : \"tabs\"}\n          onClick={() => toggleTab(1)}\n        >\n          Array\n        </button>\n        <button\n          className={toggleState === 2 ? \"tabs active-tabs\" : \"tabs\"}\n          onClick={() => toggleTab(2)}\n        >\n          Linked List\n        </button>\n        <button\n          className={toggleState === 3 ? \"tabs active-tabs\" : \"tabs\"}\n          onClick={() => toggleTab(3)}\n        >\n          Stack\n        </button>\n        <button\n          className={toggleState === 4 ? \"tabs active-tabs\" : \"tabs\"}\n          onClick={() => toggleTab(4)}\n        >\n          Queue\n        </button>\n        <button\n          className={toggleState === 5 ? \"tabs active-tabs\" : \"tabs\"}\n          onClick={() => toggleTab(5)}\n        >\n          Binary Tree\n        </button>\n        <button\n          className={toggleState === 6 ? \"tabs active-tabs\" : \"tabs\"}\n          onClick={() => toggleTab(6)}\n        >\n          Sorting Algorithms\n        </button>\n      </div>\n\n      <div className=\"content-tabs\">\n        <div\n          className={toggleState === 1 ? \"content  active-content\" : \"content\"}\n        >\n          <Array />\n        </div>\n\n        <div\n          className={toggleState === 2 ? \"content  active-content\" : \"content\"}\n        >\n          <LinkedList />\n        </div>\n\n        <div\n          className={toggleState === 3 ? \"content  active-content\" : \"content\"}\n        >\n          <Stack />\n        </div>\n\n        <div className={toggleState === 4 ? \"content active-content\" : \"content\"}>\n          <Queue />\n        </div>\n        <div className={toggleState === 5 ? \"content active-content\" : \"content\"}>\n          <Tree />\n        </div>\n        <div className={toggleState === 6 ? \"content active-content\" : \"content\"}>\n          <Sort />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Tabs;","import './App.css';\nimport React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport Tabs from './components/Tabs';\n\nfunction App() {\n\n  return (\n    <div className='bg-body'>\n      <Tabs />\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}